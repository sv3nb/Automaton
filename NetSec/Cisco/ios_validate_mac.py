#! /usr/bin/env python3
# regex code generated by regex101.com

import re
import json
from netmiko import ConnectHandler
import sys

regex = re.compile(r"(?P<protocol>\w+)\s+(?P<address>[\d\.\:]+)\s+(?P<age>-|\w+)\s+(?P<mac>\w+.\w+.\w+)\s+(?P<type>\w+)\s+(?P<interface>\w+\d\/\d)")

def net_connect():
	connection = ConnectHandler(host="192.168.107.203", port="22", username="xxx", password="xxx", device_type="cisco_ios")
	command_output = connection.send_command("show ip arp")
	return command_output

# when using a dictionary  entries like ca01.09dc.001c are returned only once even if they occur multiple times.

def arp_dict(regex):
	parse_str = net_connect()
	regex = regex
	mydict = {}
	for line in parse_str.splitlines():
		line = line.strip()
		m = regex.match(line)
		if m:
			group = m.groupdict()
			mac_address = group.get('mac')  # we retrieve the MAC and use it as the key for our new nested dictionary
			mydict.update({mac_address: group})
	for mac, entry in mydict.items():
			print('mac_address: ' + mac + ' lives on intf ' + entry['interface'] )
	return mydict

def validate_mac(regex, mymac=None):
	to_validate = arp_dict(regex)
	if "ca03.1149.001c" in to_validate: #  this only works for the keys in the dict
		print("the mac you are looking for is present :)")
	else:
		print("the mac you are looking for is not present :( !!!")

if __name__ == "__main__":
	validate_mac(regex)
